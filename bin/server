#!/usr/bin/env node
const config = require('config');
const co = require('co');
const app = require('app');
const log = require('log')();

co(function*() {
    yield* app.waitBootAndListen(config.server.host, config.server.port);
    log.info("App is listening");

}).catch(function (err) {
    throw err;
});

function shutdown() {
    // The process is going to be reloaded
    // Have to close all database/socket.io/* connections
    co(function*() {
        log.info("Closing the app...");
        yield* app.close();
        log.info("App closed");

    }).then(function () {
        log.info("Exiting");
        process.exit(0);
    }, function (err) {
        log.error(err);
    });
}

process.on('message', function (msg) {
    if (msg == 'shutdown') { // PM2 or naugth sends this on graceful reload
        shutdown();
    }
});

// handle unhandled errors
// https://iojs.org/api/process.html#process_event_rejectionhandled
var unhandledRejections = [];

process.on('unhandledRejection', function (reason, p) {
    p.trackRejectionId = Math.random();

    setTimeout(function () { // 100 ms to catch up and handle rejection
        if (p.trackRejectionId) { // if not rejectionHandled yet, report
            unhandledRejections.push(p);
            var report = {
                err: reason,
                trackRejectionId: p.trackRejectionId,
                length: unhandledRejections.length
            };

            log.error(report, "unhandledRejection");
        }
    }, 100);
});

process.on('rejectionHandled', function (p) {
    if (~unhandledRejections.indexOf(p)) {
        // too more than 100 ms to handle
        // already in the rejection list, let's report
        unhandledRejections.splice(unhandledRejections.indexOf(p), 1);

        log.error({
            trackRejectionId: p.trackRejectionId,
            length: unhandledRejections.length
        }, "rejectionHandled");
    } else {
        // handled soon, don't track
        delete p.trackRejectionId;
    }
});
